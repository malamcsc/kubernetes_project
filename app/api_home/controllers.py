# Import flask dependencies
from flask import Blueprint, request, render_template, \
                  flash, g, session, redirect, url_for, jsonify
from sqlalchemy import func
import json
from app.helper.JsonConverter import JsonConverter
#from app.helper.SearchSolar import SearchSolar 

# Import the database object from the main app module
from app import app, db
from app.helper.Constants import Constants

# Import modules models (i.e. User)
from app.api_home.models.Alerts import Users


# Define the blueprint: 'auth', set its url prefix: app.url/auth
bp_home = Blueprint('bp_home', __name__, url_prefix='/home/api')

@bp_home.route(Constants.endpoint_home_getAlert, methods=[Constants.GET])
def getAlert():
    """
    Retrieves alerts count generated by ML

    Args:
        id_alert: identifier of the alerts
    Returns:
        json: collection of the criteria in the json format
    """
    total_alerts = []
    try:
        data = db.session.query(Users).all()
        for record in data:
            record_obj = {"user_id" : record.id,
                          "name" : record.name,
                          "city" : record.city,
                          "salary" : record.salary}
            total_alerts.append(record_obj)
    except Exception as e:
        return app.make_response((jsonify(ErrorMessage=str(e), error=type(e).__name__), 500))
        
    resp = app.make_response((jsonify(total_alerts), 200))
    return resp
@bp_home.route(Constants.endpoint_home_getAlertCount, methods=[Constants.GET])
def getAlertCount():
    """
    Retrieves alerts count generated by ML

    Args:
        id_alert: identifier of the alerts
    Returns:
        json: collection of the criteria in the json format
    """
    total_count = []
    try:
        data = db.session.query(func.count(Users.id)).scalar()
        count = {"user_count" :data}
        total_count.append(count)
        
    except Exception as e:
        return app.make_response((jsonify(ErrorMessage=str(e), error=type(e).__name__), 500))
        
    resp = app.make_response((jsonify(total_count), 200))
    return resp
@bp_home.route(Constants.endpoint_home_getdata, methods=[Constants.GET])
def getdata():
    
    return "api is working without db connections"


    
